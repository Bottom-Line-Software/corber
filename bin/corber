#!/usr/bin/env node
'use strict';

process.title               = 'corber';
process.env.CORBER          = true;

const CLI                   = require('ember-cli/lib/cli/cli.js');
const Project               = require('ember-cli/lib/models/project.js');
const UI                    = require('console-ui');
const resolve               = require('resolve');
const path                  = require('path');
const requireAsHash         = require('ember-cli/lib/utilities/require-as-hash');
const willInterruptProcess  = require('ember-cli/lib/utilities/will-interrupt-process');
const exit                  = require('exit');

// `process` should be captured before we require any libraries which
// may use `process.exit` work arounds for async cleanup.
// See https://github.com/ember-cli/ember-cli/blob/953ba590d103fdf1161a385deb134805b6770553/lib/cli/index.js#L68
willInterruptProcess.capture(process);

function loadCommands() {
  const Command = require('ember-cli/lib/models/command.js');
  let hash = requireAsHash('../lib/commands/*.js', Command);
  return hash;
};

function loadTasks() {
  const Task = require('ember-cli/lib/models/task.js');
  let hash = requireAsHash('../lib/tasks/*.js', Task);
  return hash;
};

let ui = new UI({
  inputStream: process.stdin,
  outputStream: process.stdout,
  errorStream: process.stderr,
  errorLog: [],
});

let cli = new CLI({
  ui,
  name: 'corber',
  npmPackage: 'corber',
  root: path.resolve(__dirname, '..'),
  disableDependencyChecker: true
});

let project = Project.projectOrnullProject(ui, cli);

let environment = {
  tasks: loadTasks(),
  cliArgs: process.argv.slice(2),
  commands: loadCommands(),
  project,
  settings: {}
}

let promise = cli.run(environment);

promise.then(function(result) {
  let exitCode = typeof result === 'object'  && result.exitCode ? result.exitCode : 0;
  exit(exitCode);
});
promise.catch((error) => {
  let exitCode = typeof error === 'object'  && result.exitCode ? result.exitCode : 1;
  exit(exitCode);
});

return promise;
